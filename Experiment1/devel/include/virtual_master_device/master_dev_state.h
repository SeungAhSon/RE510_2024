// Generated by gencpp from file virtual_master_device/master_dev_state.msg
// DO NOT EDIT!


#ifndef VIRTUAL_MASTER_DEVICE_MESSAGE_MASTER_DEV_STATE_H
#define VIRTUAL_MASTER_DEVICE_MESSAGE_MASTER_DEV_STATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>

namespace virtual_master_device
{
template <class ContainerAllocator>
struct master_dev_state_
{
  typedef master_dev_state_<ContainerAllocator> Type;

  master_dev_state_()
    : pos()
    , button(false)  {
    }
  master_dev_state_(const ContainerAllocator& _alloc)
    : pos(_alloc)
    , button(false)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _pos_type;
  _pos_type pos;

   typedef uint8_t _button_type;
  _button_type button;





  typedef boost::shared_ptr< ::virtual_master_device::master_dev_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::virtual_master_device::master_dev_state_<ContainerAllocator> const> ConstPtr;

}; // struct master_dev_state_

typedef ::virtual_master_device::master_dev_state_<std::allocator<void> > master_dev_state;

typedef boost::shared_ptr< ::virtual_master_device::master_dev_state > master_dev_statePtr;
typedef boost::shared_ptr< ::virtual_master_device::master_dev_state const> master_dev_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::virtual_master_device::master_dev_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::virtual_master_device::master_dev_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::virtual_master_device::master_dev_state_<ContainerAllocator1> & lhs, const ::virtual_master_device::master_dev_state_<ContainerAllocator2> & rhs)
{
  return lhs.pos == rhs.pos &&
    lhs.button == rhs.button;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::virtual_master_device::master_dev_state_<ContainerAllocator1> & lhs, const ::virtual_master_device::master_dev_state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace virtual_master_device

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::virtual_master_device::master_dev_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::virtual_master_device::master_dev_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::virtual_master_device::master_dev_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::virtual_master_device::master_dev_state_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::virtual_master_device::master_dev_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::virtual_master_device::master_dev_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::virtual_master_device::master_dev_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd5bdc6b38592bad02082844596f8c6d";
  }

  static const char* value(const ::virtual_master_device::master_dev_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd5bdc6b38592badULL;
  static const uint64_t static_value2 = 0x02082844596f8c6dULL;
};

template<class ContainerAllocator>
struct DataType< ::virtual_master_device::master_dev_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "virtual_master_device/master_dev_state";
  }

  static const char* value(const ::virtual_master_device::master_dev_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::virtual_master_device::master_dev_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/PoseStamped pos\n"
"bool button\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::virtual_master_device::master_dev_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::virtual_master_device::master_dev_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos);
      stream.next(m.button);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct master_dev_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::virtual_master_device::master_dev_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::virtual_master_device::master_dev_state_<ContainerAllocator>& v)
  {
    s << indent << "pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
    s << indent << "button: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VIRTUAL_MASTER_DEVICE_MESSAGE_MASTER_DEV_STATE_H
